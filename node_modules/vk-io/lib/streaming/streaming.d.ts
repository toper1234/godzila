/// <reference types="node" />
import WebSocket from 'ws';
import { URL } from 'url';
import { inspect } from 'util';
import VK from '../vk';
export interface IStreamingRule {
    value: string;
    tag: string;
}
export default class StreamingAPI {
    protected socket: WebSocket;
    protected key: string;
    protected endpoint: URL;
    protected started: boolean;
    private vk;
    private close;
    /**
     * Constructor
     */
    constructor(vk: VK);
    /**
     * Returns custom tag
     */
    readonly [Symbol.toStringTag]: string;
    /**
     * Starts websocket
     */
    startWebSocket(): Promise<void>;
    /**
     * Stop all connection
     */
    stop(): Promise<void>;
    /**
     * Processes server messages
     */
    handleServiceMessage({ service_code: code }: {
        service_code: any;
    }): Promise<void>;
    /**
     * Handles events
     */
    private handleEvent;
    /**
     * Executes the HTTP request for rules
     */
    private fetchRules;
    /**
     * Returns a list of rules
     *
     * @return {Promise<Array>}
     */
    getRules(): Promise<IStreamingRule[]>;
    /**
     * Adds a rule
     */
    addRule(rule: IStreamingRule): Promise<void>;
    /**
     * Removes the rule
     */
    deleteRule(tag: string): Promise<void>;
    /**
     * Adds a list of rules
     */
    addRules(rules: IStreamingRule[]): Promise<void>;
    /**
     * Removes all rules
     */
    deleteRules(): Promise<void>;
    /**
     * Custom inspect object
     */
    [inspect.custom](depth: number, options: Record<string, any>): string;
}
