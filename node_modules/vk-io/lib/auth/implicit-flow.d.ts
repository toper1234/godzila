/// <reference types="node" />
import { Agent } from 'https';
import { URL } from 'url';
import VK from '../vk';
import { CookieJar } from '../utils/fetch-cookie';
interface IImplicitFlowOptions {
    appId: number;
    appSecret: string;
    login?: string;
    phone?: string | number;
    password: string;
    agent: Agent;
    scope: string | number;
    timeout: number;
    apiVersion: string;
}
export default class ImplicitFlow {
    protected vk: VK;
    protected options: IImplicitFlowOptions;
    started: boolean;
    jar: CookieJar;
    protected fetchCookie: Function;
    protected captchaValidate: any;
    protected captchaAttempts: number;
    protected twoFactorValidate: any;
    protected twoFactorAttempts: number;
    /**
     * Constructor
     */
    constructor(vk: VK, options?: Partial<IImplicitFlowOptions>);
    /**
     * Returns custom tag
     */
    readonly [Symbol.toStringTag]: string;
    /**
     * Returns CookieJar
     */
    /**
    * Sets the CookieJar
    */
    cookieJar: CookieJar;
    /**
     * Returns cookie
     */
    getCookies(): Promise<{
        'login.vk.com': string;
        'vk.com': string;
    }>;
    /**
     * Executes the HTTP request
     */
    protected fetch(url: string | URL, options?: Record<string, any>): Promise<any>;
    /**
     * Runs authorization
     */
    run(): Promise<any>;
    /**
     * Process form auth
     */
    protected processAuthForm(response: any, $: any): Promise<any>;
    /**
     * Process two-factor form
     */
    protected processTwoFactorForm(response: any, $: any): Promise<any>;
    /**
     * Process security form
     */
    protected processSecurityForm(response: any, $: any): Promise<any>;
}
export {};
