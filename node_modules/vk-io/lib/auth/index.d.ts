/// <reference types="node" />
import { inspect } from 'util';
import VK from '../vk';
import DirectAuth from './direct';
import ImplicitFlowUser from './implicit-flow-user';
import ImplicitFlowGroups from './implicit-flow-groups';
export default class Auth {
    protected vk: VK;
    /**
     * Constructor
     */
    constructor(vk: VK);
    /**
     * Returns custom tag
     */
    readonly [Symbol.toStringTag]: string;
    /**
     * Standalone authorization with login & password
     */
    implicitFlowUser(options?: {}): ImplicitFlowUser;
    /**
     * Standalone authorization with login & password for group
     *
     * @param {*}  groups
     * @param {Object} options
     */
    implicitFlowGroups(groups: any, options?: {}): ImplicitFlowGroups;
    /**
     * Direct authorization with login & login in user application
     */
    direct(): DirectAuth;
    /**
     * Direct authorization with login & login in android application
     */
    androidApp(): DirectAuth;
    /**
     * Direct authorization with login & login in windows application
     */
    windowsApp(): DirectAuth;
    /**
     * Direct authorization with login & login in windows phone application
     */
    windowsPhoneApp(): DirectAuth;
    /**
     * Direct authorization with login & login in iphone application
     */
    iphoneApp(): DirectAuth;
    /**
     * Direct authorization with login & login in ipad application
     */
    ipadApp(): DirectAuth;
    /**
     * Verifies that the user is authorized through the Open API
     */
    userAuthorizedThroughOpenAPI(params: Record<string, any>): Promise<{
        authorized: boolean;
    }>;
    /**
     * Custom inspect object
     */
    [inspect.custom](depth: number, options: Record<string, any>): string;
}
