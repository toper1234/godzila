/// <reference types="node" />
import { Agent } from 'https';
import VK from '../vk';
import { CookieJar } from '../utils/fetch-cookie';
interface IDirectAuthOptions {
    appId: number;
    appSecret: string;
    login?: string;
    phone?: string | number;
    password: string;
    agent: Agent;
    scope: string | number;
    timeout: number;
    apiVersion: string;
}
export default class DirectAuth {
    protected vk: VK;
    protected options: IDirectAuthOptions;
    started: boolean;
    jar: CookieJar;
    protected fetchCookie: Function;
    protected captchaValidate: any;
    protected captchaAttempts: number;
    protected twoFactorValidate: any;
    protected twoFactorAttempts: number;
    /**
     * Constructor
     */
    constructor(vk: VK, options?: Partial<IDirectAuthOptions>);
    /**
     * Returns custom tag
     *
     * @return {string}
     */
    readonly [Symbol.toStringTag]: string;
    /**
     * Executes the HTTP request
     */
    protected fetch(url: any, options?: Record<string, any>): Promise<Record<string, any>>;
    /**
     * Returns permission page
     */
    protected getPermissionsPage(query?: {}): Promise<any>;
    /**
     * Runs authorization
     */
    run(): Promise<{
        email: any;
        user: number;
        token: any;
        expires: number;
    }>;
    /**
     * Process captcha
     */
    protected processCaptcha({ captcha_sid: sid, captcha_img: src }: {
        captcha_sid: any;
        captcha_img: any;
    }): Promise<any>;
    /**
     * Process two-factor
     */
    protected processTwoFactor({ validation_type: validationType, phone_mask: phoneMask }: {
        validation_type: any;
        phone_mask: any;
    }): Promise<any>;
    /**
     * Process security form
     */
    protected processSecurityForm(response: any, $: any): Promise<any>;
}
export {};
