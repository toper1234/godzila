/// <reference types="node" />
import { Middleware } from 'middleware-io';
import { inspect } from 'util';
import { Context, VoteContext, TypingContext, MessageContext, WallPostContext, GroupUserContext, GroupUpdateContext, GroupMemberContext, MessageAllowContext, CommentActionContext, NewAttachmentsContext } from '../structures/contexts';
import { PollingTransport, WebhookTransport } from './transports';
import VK from '../vk';
export interface IUpdatesStartWebhookOptions {
    tls?: object;
    path?: string;
    port?: number;
    host?: string;
}
declare type HearFunctionCondition<T, U> = (value: T, context: U) => boolean;
declare type HearCondition<T, U> = HearFunctionCondition<T, U> | RegExp | string;
declare type HearObjectCondition<T extends Record<string, any>> = {
    [P in keyof T]: HearCondition<T[P], T> | HearCondition<T[P], T>[];
};
/**
 * TODO: Divide into contexts and render possible types.
 */
export declare type ContextTypes = 'message' | 'message_subscribers' | 'new_attachment' | 'wall_post' | 'group_member' | 'group_user' | 'comment' | 'vote' | 'group_update' | 'typing';
export declare type ContextSubTypes = 'new_message' | 'edit_message' | 'message_subscribe' | 'message_unsubscribe' | 'new_photo_attachment' | 'new_video_attachment' | 'new_audio_attachment' | 'new_wall_post' | 'new_wall_repost' | 'join_group_member' | 'leave_group_member' | 'block_group_user' | 'unblock_group_user' | 'photo_comment' | 'video_comment' | 'wall_comment' | 'board_comment' | 'market_comment' | 'new_photo_comment' | 'edit_photo_comment' | 'delete_photo_comment' | 'restore_photo_comment' | 'new_video_comment' | 'edit_video_comment' | 'delete_video_comment' | 'restore_video_comment' | 'new_wall_comment' | 'edit_wall_comment' | 'delete_wall_comment' | 'restore_wall_comment' | 'new_board_comment' | 'edit_board_comment' | 'delete_board_comment' | 'restore_board_comment' | 'new_market_comment' | 'edit_market_comment' | 'delete_market_comment' | 'restore_market_comment' | 'pull_vote' | 'group_update_photo' | 'group_update_officers' | 'group_update_settings' | 'typing_user' | 'typing_group';
export declare type ContextPossibleTypes = ContextTypes | ContextSubTypes | string;
export default class Updates {
    protected vk: VK;
    protected pollingTransport: PollingTransport;
    protected webhookTransport: WebhookTransport;
    protected stack: Middleware<Context>[];
    protected hearStack: Middleware<Context>[];
    protected stackMiddleware: Middleware<Context>;
    protected hearFallbackHandler: Middleware<MessageContext>;
    /**
     * Constructor
     */
    constructor(vk: VK);
    /**
     * Returns custom tag
     */
    readonly [Symbol.toStringTag]: string;
    /**
     * Checks is started
     */
    readonly isStarted: boolean;
    /**
     * Added middleware
     */
    use<T = {}>(middleware: Middleware<Context & T>): this;
    /**
     * Subscribe to events
     */
    on<T = {}>(events: 'message' | 'new_message' | 'edit_message', handler: Middleware<MessageContext & T>): this;
    on<T = {}>(events: 'message_subscribers' | 'message_subscribe' | 'message_unsubscribe', handler: Middleware<MessageAllowContext & T>): this;
    on<T = {}>(events: 'new_attachment' | 'new_photo_attachment' | 'new_video_attachment' | 'new_audio_attachment', handler: Middleware<NewAttachmentsContext & T>): this;
    on<T = {}>(events: 'wall_post' | 'new_wall_post' | 'new_wall_repost', handler: Middleware<WallPostContext & T>): this;
    on<T = {}>(events: 'group_member' | 'join_group_member' | 'leave_group_member', handler: Middleware<GroupMemberContext & T>): this;
    on<T = {}>(events: 'group_user' | 'block_group_user' | 'unblock_group_user', handler: Middleware<GroupUserContext & T>): this;
    on<T = {}>(events: 'comment' | 'photo_comment' | 'video_comment' | 'wall_comment' | 'board_comment' | 'market_comment' | 'new_photo_comment' | 'edit_photo_comment' | 'delete_photo_comment' | 'restore_photo_comment' | 'new_video_comment' | 'edit_video_comment' | 'delete_video_comment' | 'restore_video_comment' | 'new_wall_comment' | 'edit_wall_comment' | 'delete_wall_comment' | 'restore_wall_comment' | 'new_board_comment' | 'edit_board_comment' | 'delete_board_comment' | 'restore_board_comment' | 'new_market_comment' | 'edit_market_comment' | 'delete_market_comment' | 'restore_market_comment', handler: Middleware<CommentActionContext & T>): this;
    on<T = {}>(events: 'vote' | 'pull_vote', handler: Middleware<VoteContext & T>): this;
    on<T = {}>(events: 'group_update' | 'group_update_photo' | 'group_update_officers' | 'group_update_settings', handler: Middleware<GroupUpdateContext & T>): this;
    on<T = {}>(events: 'typing' | 'typing_user' | 'typing_group', handler: Middleware<TypingContext & T>): this;
    /**
     * Listen by context condition
     */
    hear<T = {}>(hearConditions: (HearCondition<string | null, T & MessageContext>[] | HearCondition<string | null, T & MessageContext>) | (HearObjectCondition<T & MessageContext> | HearObjectCondition<T & MessageContext>[]), handler: Middleware<MessageContext & T>): this;
    /**
     * A handler that is called when handlers are not found
     */
    setHearFallbackHandler<T = {}>(handler: Middleware<MessageContext & T>): this;
    /**
     * Handles longpoll event
     */
    handlePollingUpdate(update: any): Promise<void>;
    /**
     * Handles webhook event
     */
    handleWebhookUpdate(update: any): Promise<void>;
    /**
     * Starts to poll server
     */
    startPolling(): Promise<void>;
    /**
     * Starts the webhook server
     */
    startWebhook(options?: IUpdatesStartWebhookOptions, next?: Function): Promise<void>;
    /**
     * Automatically determines the settings to run
     */
    start({ webhook }?: {
        webhook?: IUpdatesStartWebhookOptions;
    }): Promise<void>;
    /**
     * Stopping gets updates
     */
    stop(): Promise<void>;
    /**
     * Returns webhook callback like http[s] or express
     */
    getWebhookCallback(path?: string): Function;
    /**
     * Returns the middleware for the webhook under koa
     */
    getKoaWebhookMiddleware(): Function;
    /**
     * Calls up the middleware chain
     */
    dispatchMiddleware(context: Context): Promise<void>;
    /**
     * Reloads middleware
     */
    protected reloadMiddleware(): void;
    /**
     * Custom inspect object
     */
    [inspect.custom](depth: number, options: Record<string, any>): string;
}
export {};
