import VK from '../../vk';
import Attachment from './attachment';
import { inspectCustomData } from '../../utils/constants';
export interface IPollAttachmentPayload {
    id: number;
    owner_id: number;
    access_key: string;
    anonymous?: number;
    multiple?: number;
    closed?: number;
    is_board?: number;
    can_edit?: number;
    can_vote?: number;
    can_report?: number;
    can_share?: number;
    author_id?: number;
    question?: string;
    created?: number;
    end_date?: number;
    votes?: number;
    answer_ids?: number[];
    friends?: number[];
    answers?: {
        id: number;
        text: string;
        votes: number;
        rate: number;
    }[];
    background?: object[];
    photo?: object;
}
export default class PollAttachment extends Attachment {
    protected vk: VK;
    protected payload: IPollAttachmentPayload;
    /**
     * Constructor
     */
    constructor(payload: IPollAttachmentPayload, vk: VK);
    /**
     * Load attachment payload
     */
    loadAttachmentPayload(): Promise<void>;
    /**
     * Checks whether the poll is anonymous
     */
    readonly isAnonymous: boolean | null;
    /**
     * Checks whether the poll allows multiple choice of answers
     */
    readonly isMultiple: boolean | null;
    /**
     * Checks whether the poll is complete
     */
    readonly isClosed: boolean | null;
    /**
     * Check whether questions are attached to the discussion
     */
    readonly isBoard: boolean | null;
    /**
     * Check if can edit the poll
     */
    readonly isCanEdit: boolean | null;
    /**
     * Check if can vote in the survey
     */
    readonly isCanVote: boolean | null;
    /**
     * Check if can complain about the poll
     */
    readonly isCanReport: boolean | null;
    /**
     * Check if can share a survey
     */
    readonly isCanShare: boolean | null;
    /**
     * Returns the ID of the poll author
     */
    readonly authorId: number | null;
    /**
     * Returns the question text
     */
    readonly question: string | null;
    /**
     * Returns the date when this poll was created
     */
    readonly createdAt: number | null;
    /**
     * Returns the end date of the poll in Unixtime. 0, if the poll is unlimited
     */
    readonly endedAt: number | null;
    /**
     * Returns the number of votes
     */
    readonly votes: number | null;
    /**
     * Returns the identifiers of the response options selected by the current user
     */
    readonly answerIds: number[] | null;
    /**
     * Returns the identifiers of 3 friends who voted in the poll
     */
    readonly friends: number[] | null;
    /**
     * Returns the information about the options for the answer
     */
    readonly answers: object[] | null;
    /**
     * Returns the poll snippet background
     */
    readonly background: object[] | null;
    /**
     * Returns a photo - the poll snippet background
     */
    readonly photo: object | null;
    /**
     * Returns the custom data
     *
     * @type {Object}
     */
    [inspectCustomData](): object;
}
