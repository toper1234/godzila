import VK from '../../vk';
import Attachment from './attachment';
import { inspectCustomData } from '../../utils/constants';
export interface IPhotoSize {
    type: string;
    url: string;
    width: number;
    height: number;
}
export interface IPhotoAttachmentPayload {
    id: number;
    owner_id: number;
    access_key: string;
    album_id?: number;
    user_id?: number;
    text?: string;
    date?: number;
    sizes?: IPhotoSize[];
    width?: number;
    height?: number;
}
export default class PhotoAttachment extends Attachment {
    protected vk: VK;
    protected payload: IPhotoAttachmentPayload;
    /**
     * Constructor
     */
    constructor(payload: IPhotoAttachmentPayload, vk: VK);
    /**
     * Load attachment payload
     */
    loadAttachmentPayload(): Promise<void>;
    /**
     * Returns the ID of the user who uploaded the image
     */
    readonly userId: number | null;
    /**
     * Returns the ID of the album
     */
    readonly albumId: number | null;
    /**
     * Returns the photo text
     */
    readonly text: string | null;
    /**
     * Returns the date when this photo was created
     */
    readonly createdAt: number | null;
    /**
     * Returns the photo height
     */
    readonly height: number | null;
    /**
     * Returns the photo width
     */
    readonly width: number | null;
    /**
     * Returns the URL of a small photo
     * (130 or 75)
     */
    readonly smallPhoto: string | null;
    /**
     * Returns the URL of a medium photo
     * (807 or 604 or less)
     */
    readonly mediumPhoto: string | null;
    /**
     * Returns the URL of a large photo
     * (2560 or 1280 or less)
     */
    readonly largePhoto: string | null;
    /**
     * Returns the sizes
     */
    readonly sizes: IPhotoSize[] | null;
    /**
     * Returns the sizes of the required types
     */
    getSizes(sizeTypes: string[]): IPhotoSize[];
    /**
     * Returns the custom data
     *
     * @type {Object}
     */
    [inspectCustomData](): object | null;
}
