import VK from '../../vk';
import Attachment from './attachment';
import { inspectCustomData } from '../../utils/constants';
export interface IDocumentAttachmentPayload {
    id: number;
    owner_id: number;
    access_key: string;
    title?: string;
    size?: number;
    ext?: string;
    url?: string;
    date?: number;
    type?: number;
    preview?: object;
}
export default class DocumentAttachment extends Attachment {
    protected vk: VK;
    protected payload: IDocumentAttachmentPayload;
    /**
     * Constructor
     */
    constructor(payload: IDocumentAttachmentPayload, vk: VK);
    /**
     * Load attachment payload
     */
    loadAttachmentPayload(): Promise<void>;
    /**
     * Checks if the document is a text
     */
    readonly isText: boolean | null;
    /**
     * Checks if the document is a archive
     */
    readonly isArchive: boolean | null;
    /**
     * Checks if the document is a gif file
     */
    readonly isGif: boolean | null;
    /**
     * Checks if the document is a image
     */
    readonly isImage: boolean | null;
    /**
     * Checks if the document is a graffiti
     */
    readonly isGraffiti: boolean | null;
    /**
     * Checks if the document is a audio
     */
    readonly isAudio: boolean | null;
    /**
     * Checks if the document is a voice
     */
    readonly isVoice: boolean | null;
    /**
     * Checks if the document is a video
     */
    readonly isVideo: boolean | null;
    /**
     * Checks if the document is a book
     */
    readonly isBook: boolean | null;
    /**
     * Returns the document title
     */
    readonly title: string | null;
    /**
     * Returns the date when this document was created
     */
    readonly createdAt: number | null;
    /**
     * Returns the type identifier (1~8)
     */
    readonly typeId: number | null;
    /**
     * Returns the type name
     */
    readonly typeName: string | null;
    /**
     * Returns the size in bytes
     */
    readonly size: number | null;
    /**
     * Returns the extension
     */
    readonly extension: string | null;
    /**
     * Returns the URL of the document
     */
    readonly url: string | null;
    /**
     * Returns the info to preview
     */
    readonly preview: object | null;
    /**
     * Checks for a property in preview
     */
    hasPreviewProperty(name: string): boolean;
    /**
     * Returns the custom data
     *
     * @type {Object}
     */
    [inspectCustomData](): object | null;
}
