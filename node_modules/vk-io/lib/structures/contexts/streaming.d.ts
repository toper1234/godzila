import Context, { IContextOptions } from './context';
import { Attachment } from '../attachments';
import { inspectCustomData } from '../../utils/constants';
export interface IStreamingContextPayload {
    event_type: 'post' | 'comment' | 'share' | 'topic_post';
    event_id: {
        post_owner_id?: number;
        post_id?: number;
        comment_id?: number;
        shared_post_id?: number;
        topic_owner_id?: number;
        topic_id?: number;
        topic_post_id?: number;
    };
    event_url: string;
    text?: string;
    action: 'new' | 'update' | 'delete' | 'restore';
    action_time: number;
    creation_time: number;
    attachments: object[];
    geo: Record<string, any>;
    shared_post_text?: string;
    shared_post_creation_time?: number;
    signer_id: number;
    tags: string[];
    author: {
        id: number;
        author_url: string;
        shared_post_author_id?: number;
        shared_post_author_url?: string;
        platform?: number;
    };
}
export declare type StreamingContextOptions<S> = Omit<IContextOptions<IStreamingContextPayload, S>, 'type' | 'subTypes'>;
export default class StreamingContext<S = Record<string, any>> extends Context<IStreamingContextPayload, S> {
    attachments: Attachment[];
    constructor(options: StreamingContextOptions<S>);
    /**
     * Checks is new object
     */
    readonly isNew: boolean;
    /**
     * Checks is update object
     */
    readonly isUpdate: boolean;
    /**
     * Checks is delete object
     */
    readonly isDelete: boolean;
    /**
     * Checks is restore object
     */
    readonly isRestore: boolean;
    /**
     * Checks is post event
     */
    readonly isPost: boolean;
    /**
     * Checks is share event
     */
    readonly isShare: boolean;
    /**
     * Checks is comment event
     */
    readonly isComment: boolean;
    /**
     * Checks for the presence of attachments
     */
    hasAttachments(type?: string): boolean;
    /**
     * Returns the event URL
     */
    readonly url: string;
    /**
     * Returns the creation time
     */
    readonly createdAt: number;
    /**
     * Returns the text of the post
     */
    readonly text: string | null;
    /**
     * Returns the text of the shared post
     */
    readonly sharedText: string | null;
    /**
     * Returns the creation time from original post
     */
    readonly sharedAt: number | null;
    /**
     * Returns the action type
     */
    readonly actionType: string;
    /**
     * Returns the event type
     */
    readonly eventType: string;
    /**
     * Returns the creation time from
     */
    readonly actionAt: number;
    /**
     * Returns the geo location
     */
    readonly geo: object;
    /**
     * Returns the rule tags
     */
    readonly tags: string[];
    /**
     * Returns the identifier signer user
     */
    readonly signerId: number;
    /**
     * Returns the information of author
     */
    readonly author: Record<string, any>;
    /**
     * Returns the identifier author
     */
    readonly authorId: number;
    /**
     * Returns the author url
     */
    readonly authorUrl: string;
    /**
     * Returns the identifier of the author of the original post
     */
    readonly sharedAuthorId: number | null;
    /**
     * Returns the author url of the original post
     */
    readonly sharedAuthorUrl: string | null;
    /**
     * Returns the author platform
     */
    readonly authorPlatform: string | null;
    /**
     * Returns the attachments
     */
    getAttachments(type?: string): Attachment[];
    /**
     * Returns the custom data
     */
    [inspectCustomData](): object;
}
