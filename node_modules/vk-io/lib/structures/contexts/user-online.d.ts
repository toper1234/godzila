import Context, { IContextOptions } from './context';
import { inspectCustomData } from '../../utils/constants';
export interface IUserOnlineContextPayload {
    user_id: number;
    date: number;
    extra: number;
}
export declare type UserOnlineContextOptions<S> = Omit<IContextOptions<[number, number, number, number], S>, 'type' | 'subTypes'>;
export default class VoteContext<S = Record<string, any>> extends Context<IUserOnlineContextPayload, S> {
    constructor(options: UserOnlineContextOptions<S>);
    /**
     * Checks that the user is online
     */
    readonly isUserOnline: boolean;
    /**
     * Checks that the user is online
     */
    readonly isUserOffline: boolean;
    /**
     * Checks that the user has logged out of the network himself
     */
    readonly isSelfExit: boolean;
    /**
     * Checks that the user logged out a timeout
     */
    readonly isTimeoutExit: boolean;
    /**
     * Returns the user id
     */
    readonly userId: number | null;
    /**
     * Returns the date when this event was created
     */
    readonly createdAt: number;
    /**
     * Returns the name of the platform from which the user entered
     */
    readonly platformName: string;
    /**
     * Returns the custom data
     */
    [inspectCustomData](): object;
}
