import Context, { IContextOptions } from './context';
import { inspectCustomData } from '../../utils/constants';
export interface IGroupUserContextPayload {
    admin_id: number;
    user_id: number;
    comment: string;
    reason: number;
    unblock_date?: number;
    by_end_date?: number;
}
export declare type GroupUserContextOptions<S> = Omit<IContextOptions<IGroupUserContextPayload, S>, 'type' | 'subTypes'>;
export default class GroupUserContext<S = Record<string, any>> extends Context<IGroupUserContextPayload, S> {
    constructor(options: GroupUserContextOptions<S>);
    /**
     * Checks is join user
     */
    readonly isBlocked: boolean;
    /**
     * Checks is leave user
     */
    readonly isUnblocked: boolean;
    /**
     * Checks that the block has expired
     *
     * @return {?boolean}
     */
    readonly isExpired: boolean | null;
    /**
     * Returns the identifier admin
     */
    readonly adminId: number;
    /**
     * Returns the identifier user
     */
    readonly userId: number;
    /**
     * Returns the reason for the ban
     */
    readonly reasonId: number;
    /**
     * Returns the reason name for the ban
     */
    readonly reasonName: string | null;
    /**
     * Returns the unblock date or null if permanent
     */
    readonly unblockAt: number | null;
    /**
     * Returns the administrator comment to block
     */
    readonly comment: string | null;
    /**
     * Adds a user to the community blacklist
     */
    ban(params: object): Promise<number>;
    /**
     * Adds a user to the community blacklist
     *
     * @return {Promise}
     */
    unban(): Promise<number>;
    /**
     * Returns the custom data
     */
    [inspectCustomData](): object;
}
