import Context, { IContextOptions } from './context';
import MessageReply from '../shared/message-reply';
import MessageForwardsCollection from '../shared/message-forwards-collection';
import { inspectCustomData } from '../../utils/constants';
import { Attachment } from '../attachments';
export interface IMessageContextPayload {
    id: number;
    conversation_message_id: number;
    out: number;
    peer_id: number;
    from_id: number;
    text?: string;
    date: number;
    random_id: number;
    ref?: string;
    ref_source?: string;
    attachments: object[];
    important: boolean;
    geo: object;
    payload?: string;
    fwd_messages?: object[];
    reply_message?: object;
    action?: {
        type: string;
        member_id: number;
        text?: string;
        email?: string;
        photo?: {
            photo_50: string;
            photo_100: string;
            photo_200: string;
        };
    };
}
export declare type MessageContextOptions<S> = Omit<IContextOptions<IMessageContextPayload, S>, 'type' | 'subTypes'>;
export default class MessageContext<S = Record<string, any>> extends Context<IMessageContextPayload, S> {
    $match: RegExpMatchArray;
    text: string | null;
    protected $filled: boolean;
    constructor(options: MessageContextOptions<S>);
    /**
     * Load message payload
     */
    loadMessagePayload(): Promise<void>;
    /**
     * Checks for the presence of attachments
     */
    hasAttachments(type?: string): boolean;
    /**
     * Checks if there is text
     */
    readonly hasText: boolean;
    /**
     * Checks for reply message
     */
    readonly hasReplyMessage: boolean;
    /**
     * Checks for forwarded messages
     */
    readonly hasForwards: boolean;
    /**
     * Checks for hast message payload
     */
    readonly hasMessagePayload: boolean;
    /**
     * Checks if there is text
     */
    readonly hasGeo: boolean;
    /**
     * Checks is a chat
     */
    readonly isChat: boolean;
    /**
     * Check is a user
     */
    readonly isUser: boolean;
    /**
     * Checks is a group
     */
    readonly isGroup: boolean;
    /**
     * Checks is from the user
     */
    readonly isFromUser: boolean;
    /**
     * Checks is from the group
     */
    readonly isFromGroup: boolean;
    /**
     * Check is special event
     */
    readonly isEvent: boolean;
    /**
     * Checks whether the message is outbox
     */
    readonly isOutbox: boolean;
    /**
     * Checks whether the message is inbox
     */
    readonly isInbox: boolean;
    /**
     * Checks that the message is important
     */
    readonly isImportant: boolean;
    /**
     * Returns the identifier message
     */
    readonly id: number;
    /**
     * Returns the conversation message id
     */
    readonly conversationMessageId: number | null;
    /**
     * Returns the destination identifier
     */
    readonly peerId: number;
    /**
     * Returns the peer type
     */
    readonly peerType: string;
    /**
     * Returns the sender identifier
     */
    readonly senderId: number;
    /**
     * Returns the sender type
     */
    readonly senderType: string;
    /**
     * Returns the identifier chat
     */
    readonly chatId: number | null;
    /**
     * Returns the date when this message was created
     */
    readonly createdAt: number;
    /**
     * Returns geo
     *
     * @return {?Object}
     */
    readonly geo: object | null;
    /**
     * Returns the event name
     */
    readonly eventType: string | null;
    /**
     * Returns the event member id
     */
    readonly eventMemberId: number | null;
    /**
     * Returns the event name
     */
    readonly eventText: string | null;
    /**
     * Returns the event email
     */
    readonly eventEmail: string | null;
    /**
     * Returns the message payload
     */
    readonly messagePayload: any | null;
    /**
     * Returns the forwards
     */
    readonly forwards: MessageForwardsCollection;
    /**
     * Returns the reply message
     */
    readonly replyMessage: MessageReply | null;
    /**
     * Returns the attachments
     */
    readonly attachments: Attachment[];
    /**
     * Returns the attachments
     */
    getAttachments(type?: string): Attachment[];
    /**
     * Gets a link to invite the user to a conversation
     */
    getInviteLink(params?: object): Promise<object>;
    /**
     * Edits a message
     */
    editMessage(params: object): Promise<number>;
    /**
     * Edits a message text
     */
    editMessageText(message: string): Promise<number>;
    /**
     * Sends a message to the current dialog
     */
    send(text: string | object, params?: object): Promise<number>;
    /**
     * Responds to the current message
     */
    reply(text: string | object, params?: object): Promise<number>;
    /**
     * Sends a sticker to the current dialog
     */
    sendSticker(id: number): Promise<number>;
    /**
     * Sends a photo to the current dialog
     *
     * @param {*[]} sources
     */
    sendPhoto(rawSources: any, params?: object): Promise<number>;
    /**
     * Sends a document to the current dialog
     *
     * @param {*[]} sources
     */
    sendDocument(rawSources: any, params?: object): Promise<number>;
    /**
     * Sends a audio message to the current dialog
     *
     * @param {*}  sourxe
     */
    sendAudioMessage(source: any, params?: object): Promise<number>;
    /**
     * Changes the status of typing in the dialog
     */
    setActivity(): Promise<boolean>;
    /**
     * Marks messages as important or removes a mark
     */
    markAsImportant(ids?: number[], options?: {
        important: number;
    }): Promise<number[]>;
    /**
     * Deletes the message
     */
    deleteMessage(ids?: number[], options?: {
        spam: number;
    }): Promise<number>;
    /**
     * Restores the message
     */
    restoreMessage(): Promise<boolean>;
    /**
     * Rename the chat
     */
    renameChat(title: string): Promise<boolean>;
    /**
     * Sets a new image for the chat
     *
     * @param {*}  source
     */
    newChatPhoto(source: any, params?: object): Promise<object>;
    /**
     * Remove the chat photo
     */
    deleteChatPhoto(): Promise<boolean>;
    /**
     * Invites a new user
     */
    inviteUser(id?: number): Promise<boolean>;
    /**
     * Excludes user
     */
    kickUser(id?: number): Promise<boolean>;
    /**
     * Pins a message
     */
    pinMessage(): Promise<boolean>;
    /**
     * Unpins a message
     */
    unpinMessage(): Promise<boolean>;
    /**
     * Applies the payload
     */
    private applyPayload;
    /**
     * Checks that in a chat
     */
    private assertIsChat;
    /**
     * Returns the custom data
     */
    [inspectCustomData](): object;
}
