/// <reference types="node" />
import { inspect } from 'util';
import VK from '../../vk';
import { inspectCustomData, updatesSources } from '../../utils/constants';
export interface IContextOptions<P, S> {
    vk: VK;
    type: string;
    subTypes: string[];
    payload: P;
    state?: S;
    source: updatesSources;
    updateType: any;
    groupId?: number;
}
export default class Context<P = {}, S = {}> {
    type: string;
    subTypes: string[];
    state: S;
    vk: VK;
    $groupId?: number;
    protected payload: P;
    /**
     * Constructor
     */
    constructor(options: IContextOptions<P, S>);
    /**
     * Returns custom tag
     */
    readonly [Symbol.toStringTag]: string;
    /**
     * Checks whether the context of some of these types
     */
    is(rawTypes: string | string[]): boolean;
    /**
     * Returns data for JSON
     */
    toJSON(): object;
    /**
     * Returns the custom data
     */
    [inspectCustomData](): object;
    /**
     * Custom inspect object
     */
    [inspect.custom](depth: number, options: Record<string, any>): string;
}
