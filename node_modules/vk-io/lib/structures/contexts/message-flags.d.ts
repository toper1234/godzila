import Context, { IContextOptions } from './context';
import { inspectCustomData } from '../../utils/constants';
export interface IMessageFlagsContextPayload {
    id: number;
    peer_id: number;
    flags: number;
}
export declare type MessageFlagsContextOptions<S> = Omit<IContextOptions<number[], S>, 'type' | 'subTypes'>;
export default class MessageFlagsContext<S = Record<string, any>> extends Context<IMessageFlagsContextPayload, S> {
    constructor(options: MessageFlagsContextOptions<S>);
    /**
     * Verifies that the message is not read
     */
    readonly isUnread: boolean;
    /**
     * Checks that the outgoing message
     */
    readonly isOutbox: boolean;
    /**
     * Verifies that a reply has been created to the message
     */
    readonly isReplied: boolean;
    /**
     * Verifies that the marked message
     */
    readonly isImportant: boolean;
    /**
     * Verifies that the message was sent via chat
     */
    readonly isChat: boolean;
    /**
     * Verifies that the message was sent by a friend
     */
    readonly isFriends: boolean;
    /**
     * Verifies that the message is marked as "Spam"
     */
    readonly isSpam: boolean;
    /**
     * Verifies that the message has been deleted (in the Recycle Bin)
     */
    readonly isDeleted: boolean;
    /**
     * Verifies that the message was verified by the user for spam
     */
    readonly isFixed: boolean;
    /**
     * Verifies that the message contains media content
     */
    readonly isMedia: boolean;
    /**
     * Checks that a welcome message from the community
     */
    readonly isHidden: boolean;
    /**
     * Message deleted for all recipients
     */
    readonly isDeletedForAll: boolean;
    /**
     * Returns the message ID
     */
    readonly id: number;
    /**
     * Returns the destination identifier
     */
    readonly peerId: number;
    /**
     * Returns the values of the flags
     */
    readonly flags: number;
    /**
     * Returns the custom data
     */
    [inspectCustomData](): object;
}
