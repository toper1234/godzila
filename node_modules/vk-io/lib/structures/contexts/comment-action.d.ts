import Context, { IContextOptions } from './context';
import { inspectCustomData } from '../../utils/constants';
import { Attachment } from '../attachments';
export interface ICommentActionContextPayload {
    id: number;
    owner_id: number;
    from_id?: number;
    user_id?: number;
    reply_to_user?: number;
    reply_to_comment?: number;
    deleter_id?: number;
    photo_id?: number;
    video_id?: number;
    post_id?: number;
    item_id?: number;
    topic_id?: number;
    photo_owner_id?: number;
    video_owner_id?: number;
    post_owner_id?: number;
    topic_owner_id?: number;
    market_owner_id?: number;
    date?: number;
    text?: string;
    attachments?: object[];
    likes?: {};
}
export declare type CommentActionContextOptions<S> = Omit<IContextOptions<ICommentActionContextPayload, S>, 'type' | 'subTypes'>;
export default class CommentActionContext<S = Record<string, any>> extends Context<ICommentActionContextPayload, S> {
    attachments: Attachment[];
    constructor(options: CommentActionContextOptions<S>);
    /**
     * Checks for the presence of attachments
     */
    hasAttachments(type?: string): boolean;
    /**
     * Checks is new comment
     */
    readonly isNew: boolean;
    /**
     * Checks is edit comment
     */
    readonly isEdit: boolean;
    /**
     * Checks is delete comment
     */
    readonly isDelete: boolean;
    /**
     * Checks is restore comment
     */
    readonly isRestore: boolean;
    /**
     * Checks is photo comment
     */
    readonly isPhotoComment: boolean;
    /**
     * Checks is wall comment
     */
    readonly isWallComment: boolean;
    /**
     * Checks is video comment
     */
    readonly isVideoComment: boolean;
    /**
     * Checks is board comment
     */
    readonly isBoardComment: boolean;
    /**
     * Checks is board comment
     */
    readonly isMarketComment: boolean;
    /**
     * Checks is reply comment
     */
    readonly isReply: boolean;
    /**
     * Returns the identifier comment
     */
    readonly id: number;
    /**
     * Returns the identifier reply comment
     */
    readonly replyId: number | null;
    /**
     * Returns the identifier user
     */
    readonly userId: number | null;
    /**
     * Returns the identifier reply user
     */
    readonly replyUserId: number | null;
    /**
     * Returns the identifier of the user who deleted the comment
     */
    readonly removerUserId: number | null;
    /**
     * Returns the identifier of object
     */
    readonly objectId: number | null;
    /**
     * Returns the identifier of owner
     */
    readonly ownerId: number | null;
    /**
     * Returns the date creation action comment
     */
    readonly createdAt: number | null;
    /**
     * Returns the text comment
     */
    readonly text: string | null;
    /**
     * Returns the likes
     */
    readonly likes: Record<string, any> | null;
    /**
     * Returns the attachments
     */
    getAttachments(type?: string): Attachment[];
    /**
     * Includes from subtype
     */
    includesFromSubType(type: string): boolean;
    /**
     * Edits a comment
     */
    editComment(options: object): Promise<number>;
    /**
     * Removes comment
     */
    deleteComment(): Promise<number>;
    /**
     * Returns the custom data
     */
    [inspectCustomData](): object;
}
