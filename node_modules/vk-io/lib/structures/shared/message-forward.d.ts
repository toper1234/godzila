/// <reference types="node" />
import { inspect } from 'util';
import VK from '../../vk';
import { Attachment } from '../attachments';
export interface IMessageForwardPayload {
    text?: string;
    attachments: any[];
    fwd_messages: IMessageForwardPayload[];
    from_id: number;
    date: number;
    update_time: number;
}
export interface IMessageForwardOptions {
    vk: VK;
    payload: IMessageForwardPayload;
}
export default class MessageForward {
    protected vk: VK;
    protected payload: IMessageForwardPayload;
    /**
     * Constructor
     */
    constructor(options: IMessageForwardOptions);
    /**
     * Returns custom tag
     */
    readonly [Symbol.toStringTag]: string;
    /**
     * Checks if there is text
     */
    readonly hasText: boolean;
    /**
     * Checks for the presence of attachments
     */
    hasAttachments(type?: string): boolean;
    /**
     * Returns the date when this message was created
     */
    readonly createdAt: number;
    /**
     * Returns the date when this message was updated
     */
    readonly updatedAt: number;
    /**
     * Returns the message text
     */
    readonly senderId: number;
    /**
     * Returns the message text
     */
    readonly text: string | null;
    /**
     * Returns the forwards
     */
    readonly forwards: MessageForward[];
    /**
     * Returns the attachments
     */
    readonly attachments: Attachment[];
    /**
     * Returns the attachments
     */
    getAttachments(type?: string): Attachment[];
    /**
     * Returns data for JSON
     */
    toJSON(): object;
    /**
     * Custom inspect object
     */
    [inspect.custom](depth: number, options: Record<string, any>): string;
}
