/// <reference types="node" />
import { inspect } from 'util';
import { Readable } from 'stream';
import VK from '../vk';
export default class CollectStream extends Readable {
    protected vk: VK;
    protected method: string;
    protected code: string;
    protected parallelCount: number;
    protected total: number;
    protected offset: number;
    protected skipOffset: number;
    protected received: number;
    protected attempts: number;
    protected supportExecute: boolean;
    protected promise: Promise<any> | null;
    protected params: Record<string, any>;
    /**
     * Constructor
     */
    constructor(vk: VK, { options, method, limit, max }: {
        options: any;
        method: any;
        limit: any;
        max?: any;
    });
    /**
     * Returns custom tag
     */
    readonly [Symbol.toStringTag]: string;
    /**
     * Promise based
     *
     * @return {Promise<Object[]>}
     */
    then(thenFn: any, catchFn?: any): Promise<{
        items: object[];
        profiles: object[];
        groups: object[];
    }>;
    /**
     * Fetch data
     */
    _read(): Promise<void>;
    /**
     * Custom inspect object
     */
    [inspect.custom](depth: number, options: Record<string, any>): string;
}
